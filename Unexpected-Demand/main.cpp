
#include <bits/stdc++.h>
#include <chrono>
using namespace std;

/*
 * Complete the 'filledOrders' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY order
 *  2. INTEGER k
 */

int filledOrders(vector<int> order, int k) {

    std::sort(order.begin(),order.end());

    int a = 0;

    while(a < order.size())
    {
        k -= order[a];

        if(k >= 0)
            a++;
        else
            break;
    }

    return a;
}

void check(int sol0, int sol1, int testNo)
{
    if(sol0 != sol1)
        cout<<"ERROR IN TESTCASE "<< testNo<<endl;
    else
        cout<<"SUCCESS IN TESTCASE "<< testNo<<endl;
}

int main()
{
    vector<int> order0 = {10,30};
    int widgets0 = 40;
    int solution0 = 2;
    std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();
    int mySolution0 = filledOrders(order0,widgets0);
    std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[µs]" << std::endl;
    check(solution0,mySolution0,0);

    vector<int> order1 = {5,4,6};
    int widgets1 = 3;
    int solution1 = 0;
    begin = std::chrono::steady_clock::now();
    int mySolution1 = filledOrders(order1,widgets1);
    end = std::chrono::steady_clock::now();
    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[µs]" << std::endl;
    check(solution1,mySolution1,1);

    vector<int> order2 = {21,24};
    int widgets2 = 83178701;
    int solution2 = 2;
    begin = std::chrono::steady_clock::now();
    int mySolution2 = filledOrders(order2,widgets2);
    end = std::chrono::steady_clock::now();
    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[µs]" << std::endl;
    check(solution2,mySolution2,2);

    vector<int> order3 = { 76532411,4309294,4173421,3099762
                          ,168026,58739,37856,66235
                          ,24078,8222,11597 ,1092
                          ,402,83 ,696,56
                          ,2,8,31,25
                          ,3,1,2,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,1,1,1
                          ,1,2};
    int widgets3 = 88492114;
    int solution3 = 94;
    begin = std::chrono::steady_clock::now();
    int mySolution3 = filledOrders(order3,widgets3);
    end = std::chrono::steady_clock::now();
    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[µs]" << std::endl;
    check(solution3,mySolution3,3);

    vector<int> orders4 = {
        1070
        ,4757
        ,3946
        ,4324
        ,3220
        ,1608
        ,3729
        ,3886
        ,1176
        ,1600
        ,1176
        ,2882
        ,3944
        ,2010
        ,694
        ,1411
        ,576
        ,3471
        ,1580
        ,4426
        ,4729
        ,868
        ,3674
        ,2445
        ,745
        ,3504
        ,3563
        ,3980
        ,1216
        ,4307
        ,2282
        ,2285
        ,4063
        ,1227
        ,2961
        ,3635
        ,4186
        ,1689
        ,2520
        ,362
        ,4641
        ,3696
        ,3243
        ,3584
        ,705
        ,288
        ,1347
        ,2633
        ,3758
        ,2926
        ,3410
        ,4838
        ,145
        ,3435
        ,2282
        ,2241
        ,1939
        ,845
        ,2572
        ,4506
        ,1503
        ,4853
        ,3143
        ,1917
        ,2431
        ,1103
        ,551
        ,1617
        ,2791
        ,4423
        ,3330
        ,3783
        ,3118
        ,2924
        ,2367
        ,174
        ,4564
        ,65
        ,4158
        ,4673
        ,4342
        ,2568
        ,4511
        ,4486
        ,2354
        ,1792
        ,1726
        ,4292
        ,3988
        ,4298
        ,150
        ,1842
        ,502
        ,3292
        ,3759
        ,2933
        ,4394
        ,4309
        ,901
        ,3536
        ,83
        ,582
        ,2319
        ,3200
        ,3505
        ,1037
        ,4726
        ,4420
        ,1101
        ,235
        ,4093
        ,442
        ,4154
        ,3603
        ,1279
        ,1508
        ,1746
        ,3004
        ,2151
        ,2086
        ,3653
        ,2300
        ,3927
        ,507
        ,591
        ,2685
        ,3439
        ,1336
        ,3346
        ,691
        ,4872
        ,3428
        ,1272
        ,3542
        ,2980
        ,1128
        ,930
        ,4057
        ,1900
        ,3382
        ,643
        ,992
        ,175
        ,4797
        ,946
        ,1453
        ,1304
        ,2691
        ,808
        ,4806
        ,1128
        ,813
        ,2106
        ,55
        ,1319
        ,4048
        ,4091
        ,1109
        ,384
        ,2436
        ,1799
        ,1607
        ,2216
        ,4422
        ,1500
        ,1547
        ,1901
        ,2429
        ,1955
        ,3800
        ,2162
        ,2597
        ,4791
        ,2336
        ,2393
        ,736
        ,140
        ,48
        ,4779
        ,947
        ,4854
        ,906
        ,3111
        ,3311
        ,2312
        ,4429
        ,2358
        ,1403
        ,537
        ,4093
        ,190
        ,3687
        ,699
        ,3757
        ,3108
        ,3550
        ,303
        ,9
        ,2330
        ,2257
        ,160
        ,4491
        ,1206
        ,4951
        ,3178
        ,3598
        ,2038
        ,4669
        ,4998
        ,3168
        ,616
        ,4851
        ,426
        ,78
        ,3161
        ,2737
        ,4507
        ,1870
        ,491
        ,1395
        ,963
        ,681
        ,82
        ,3013
        ,4437
        ,4541
        ,2915
        ,4740
        ,4549
        ,244
        ,3348
        ,1061
        ,1087
        ,905
        ,2363
        ,616
        ,855
        ,4400
        ,285
        ,852
        ,3920
        ,2252
        ,2054
        ,697
        ,2329
        ,1566
        ,3433
        ,1835
        ,3435
        ,3924
        ,3230
        ,749
        ,956
        ,3311
        ,114
        ,392
        ,2851
        ,3028
        ,1483
        ,3752
        ,4623
        ,1183
        ,1164
        ,709
        ,2087
        ,3526
        ,1325
        ,2941
        ,4277
        ,1609
        ,3792
        ,3196
        ,3860
        ,2197
        ,244
        ,2540
        ,3762
        ,3677
        ,4375
        ,3549
        ,3952
        ,3956
        ,649
        ,1259
        ,3618
        ,762
        ,1650
        ,2820
        ,141
        ,3133
        ,2923
        ,4764
        ,667
        ,4086
        ,1824
        ,2753
        ,2611
        ,4500
        ,694
        ,1888
        ,2460
        ,837
        ,1435
        ,1319
        ,4386
        ,1679
        ,3859
        ,3147
        ,1707
        ,4585
        ,3047
        ,2010
        ,3540
        ,3696
        ,3268
        ,3509
        ,809
        ,1269
        ,1328
        ,2302
        ,4401
        ,4251
        ,2065
        ,1419
        ,3336
        ,240
        ,4172
        ,2299
        ,4740
        ,1217
        ,4186
        ,2199
        ,3405
        ,620
        ,4870
        ,2790
        ,3650
        ,80
        ,937
        ,356
        ,4664
        ,335
        ,2365
        ,4555
        ,382
        ,632
        ,3063
        ,1191
        ,1901
        ,4390
        ,4844
        ,2653
        ,4992
        ,1908
        ,4072
        ,3328
        ,3499
        ,4595
        ,1978
        ,3238
        ,811
        ,1163
        ,437
        ,4215
        ,3134
        ,306
        ,2005
        ,1784
        ,1737
        ,4293
        ,2139
        ,1400
        ,979
        ,4504
        ,2306
        ,1361
        ,1487
        ,1720
        ,3903
        ,4739
        ,1109
        ,3746
        ,3744
        ,2453
        ,2005
        ,4167
        ,2132
        ,503
        ,3761
        ,4109
        ,3741
        ,923
    };
    int widgets4 = 627971951;
    int solution4 = 392;
    begin = std::chrono::steady_clock::now();
    int mySolution4 = filledOrders(orders4,widgets4);
    end = std::chrono::steady_clock::now();
    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[µs]" << std::endl;
    check(solution4,mySolution4,4);

    vector<int> orders5 = {
        76489
        ,9756
        ,17186
        ,79845
        ,91539
        ,53922
        ,9137
        ,8678
        ,51673
        ,75116
        ,94533
        ,93978
        ,77828
        ,52371
        ,10697
        ,71730
        ,43462
        ,3157
        ,70475
        ,78557
        ,609
        ,67479
        ,12723
        ,99092
        ,72981
        ,42835
        ,48200
        ,78073
        ,95109
        ,24822
        ,18601
        ,71597
        ,34578
        ,35786
        ,51442
        ,26116
        ,89707
        ,76930
        ,51145
        ,41379
        ,52045
        ,62029
        ,51708
        ,29872
        ,30752
        ,62404
        ,17953
        ,74213
        ,81913
        ,88427
        ,52769
        ,98873
        ,72257
        ,81843
        ,97965
        ,45238
        ,24677
        ,46164
        ,39662
        ,19785
        ,70986
        ,58263
        ,91381
        ,21915
        ,94048
        ,59174
        ,48030
        ,107
        ,36104
        ,15527
        ,57837
        ,4500
        ,77555
        ,9545
        ,50724
        ,8306
        ,88300
        ,68676
        ,98870
        ,70212
        ,57103
        ,51638
        ,85437
        ,29359
        ,33480
        ,83401
        ,90948
        ,74508
        ,45916
        ,30610
        ,94292
        ,33253
        ,5224
        ,2025
        ,55167
        ,15623
        ,61198
        ,19549
        ,15729
        ,13653
        ,35075
        ,89918
        ,18153
        ,12629
        ,99462
        ,68876
        ,37287
        ,4113
        ,37551
        ,36156
        ,90677
        ,11005
        ,87794
        ,76113
        ,56716
        ,37625
        ,75865
        ,47663
        ,12133
        ,21780
        ,94624
        ,22776
        ,55033
        ,99847
        ,41152
        ,26551
        ,15470
        ,18702
        ,46099
        ,47550
        ,32354
        ,81173
        ,37467
        ,66858
        ,10154
        ,36928
        ,35733
        ,47440
        ,57393
        ,89636
        ,83595
        ,48069
        ,16992
        ,87740
        ,24181
        ,73707
        ,41717
        ,45
        ,37722
        ,70201
        ,38176
        ,32345
        ,9328
        ,93208
        ,48544
        ,50480
        ,36111
        ,64013
        ,69181
        ,82209
        ,11562
        ,17886
        ,79734
        ,65381
        ,84744
        ,89887
        ,2308
        ,36828
        ,37326
        ,59700
        ,42815
        ,37272
        ,24120
        ,59807
        ,41364
        ,48300
        ,33513
        ,99432
        ,64696
        ,71234
        ,69632
        ,2872
        ,19931
        ,78959
        ,12431
        ,68474
        ,45790
        ,48541
        ,48838
        ,14970
        ,47102
        ,60399
        ,49208
        ,26835
        ,42131
        ,33951
        ,16721
        ,44439
        ,87130
        ,70398
        ,20490
        ,29945
        ,24021
        ,44610
        ,89751
        ,65384
        ,9261
        ,39615
        ,81167
        ,73957
        ,27201
        ,50798
        ,93180
        ,47131
        ,46109
        ,5610
        ,31956
        ,8250
        ,70503
        ,80793
        ,39572
        ,17604
        ,57543
        ,88779
        ,44438
        ,99674
        ,39081
        ,61158
        ,60464
        ,26210
        ,47907
        ,97305
        ,56154
        ,71927
        ,58266
        ,62256
        ,37311
        ,67527
        ,1871
        ,18477
        ,57835
        ,29071
        ,85627
        ,51014
        ,92553
        ,48087
        ,72975
        ,24508
        ,56336
        ,59829
        ,5300
        ,12259
        ,77432
        ,79194
        ,1037
        ,38221
        ,78867
        ,40117
        ,99378
        ,39330
        ,82679
        ,47284
        ,52987
        ,38832
        ,35563
        ,11252
        ,1088
        ,72873
        ,78778
        ,19310
        ,7701
    };
    int widgets5 = 341040529;
    int solution5 = 271;
    begin = std::chrono::steady_clock::now();
    int mySolution5 = filledOrders(orders5,widgets5);
    end = std::chrono::steady_clock::now();
    std::cout << "Time difference = " << std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count() << "[µs]" << std::endl;
    check(solution5,mySolution5,5);
    return 0;
}

